cmake_minimum_required(VERSION 2.8.3)
project(doornumber)

## Compile as C++11, supported in ROS Kinetic and newer
# add_compile_options(-std=c++11)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  nav_msgs
  roscpp
  sensor_msgs
  std_msgs
  cv_bridge
  image_transport
  message_generation
)
find_package(OpenCV REQUIRED)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
add_message_files(
   FILES
   board.msg
   boardArray.msg
 )

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
generate_messages(
   DEPENDENCIES
   std_msgs
)

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if your package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES doornumber
#  CATKIN_DEPENDS nav_msgs roscpp sensor_msgs std_msgs
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(
# include
  ${catkin_INCLUDE_DIRS}
)

## Declare a C++ library
# add_library(${PROJECT_NAME}
#   src/${PROJECT_NAME}/doornumber.cpp
# )
set(exec_prefix /home/liaoziwei/package/opencv_tesseract/opencv-3.3.0/build/)
set(new_ros_libs /opt/ros/kinetic/lib/libcv_bridge.so ${exec_prefix}/lib/libopencv_calib3d.so.3.3.0 ${exec_prefix}/lib/libopencv_core.so.3.3.0 ${exec_prefix}/lib/libopencv_features2d.so.3.3.0 ${exec_prefix}/lib/libopencv_flann.so.3.3.0 ${exec_prefix}/lib/libopencv_highgui.so.3.3.0 ${exec_prefix}/lib/libopencv_imgcodecs.so.3.3.0 ${exec_prefix}/lib/libopencv_imgproc.so.3.3.0 ${exec_prefix}/lib/libopencv_ml.so.3.3.0 ${exec_prefix}/lib/libopencv_objdetect.so.3.3.0 ${exec_prefix}/lib/libopencv_photo.so.3.3.0 ${exec_prefix}/lib/libopencv_shape.so.3.3.0 ${exec_prefix}/lib/libopencv_stitching.so.3.3.0 ${exec_prefix}/lib/libopencv_superres.so.3.3.0 ${exec_prefix}/lib/libopencv_video.so.3.3.0 ${exec_prefix}/lib/libopencv_videoio.so.3.3.0 ${exec_prefix}/lib/libopencv_videostab.so.3.3.0 ${exec_prefix}/lib/libopencv_viz.so.3.3.0 ${exec_prefix}/lib/libopencv_aruco.so.3.3.0 ${exec_prefix}/lib/libopencv_bgsegm.so.3.3.0 ${exec_prefix}/lib/libopencv_bioinspired.so.3.3.0 ${exec_prefix}/lib/libopencv_ccalib.so.3.3.0 ${exec_prefix}/lib/libopencv_datasets.so.3.3.0 ${exec_prefix}/lib/libopencv_dpm.so.3.3.0 ${exec_prefix}/lib/libopencv_face.so.3.3.0 ${exec_prefix}/lib/libopencv_fuzzy.so.3.3.0 ${exec_prefix}/lib/libopencv_hdf.so.3.3.0 ${exec_prefix}/lib/libopencv_line_descriptor.so.3.3.0 ${exec_prefix}/lib/libopencv_optflow.so.3.3.0 ${exec_prefix}/lib/libopencv_phase_unwrapping.so.3.3.0 ${exec_prefix}/lib/libopencv_plot.so.3.3.0 ${exec_prefix}/lib/libopencv_reg.so.3.3.0 ${exec_prefix}/lib/libopencv_rgbd.so.3.3.0 ${exec_prefix}/lib/libopencv_saliency.so.3.3.0 ${exec_prefix}/lib/libopencv_stereo.so.3.3.0 ${exec_prefix}/lib/libopencv_structured_light.so.3.3.0 ${exec_prefix}/lib/libopencv_surface_matching.so.3.3.0 ${exec_prefix}/lib/libopencv_text.so.3.3.0 ${exec_prefix}/lib/libopencv_xfeatures2d.so.3.3.0 ${exec_prefix}/lib/libopencv_ximgproc.so.3.3.0 ${exec_prefix}/lib/libopencv_xobjdetect.so.3.3.0 ${exec_prefix}/lib/libopencv_xphoto.so.3.3.0  /opt/ros/kinetic/lib/libimage_transport.so /opt/ros/kinetic/lib/libmessage_filters.so /opt/ros/kinetic/lib/libclass_loader.so /usr/lib/libPocoFoundation.so /usr/lib/x86_64-linux-gnu/libdl.so /opt/ros/kinetic/lib/libroscpp.so /usr/lib/x86_64-linux-gnu/libboost_signals.so /opt/ros/kinetic/lib/librosconsole.so /opt/ros/kinetic/lib/librosconsole_log4cxx.so /opt/ros/kinetic/lib/librosconsole_backend_interface.so /usr/lib/x86_64-linux-gnu/liblog4cxx.so /usr/lib/x86_64-linux-gnu/libboost_regex.so /opt/ros/kinetic/lib/libxmlrpcpp.so /opt/ros/kinetic/lib/libroslib.so /opt/ros/kinetic/lib/librospack.so /usr/lib/x86_64-linux-gnu/libpython2.7.so /usr/lib/x86_64-linux-gnu/libboost_filesystem.so /usr/lib/x86_64-linux-gnu/libboost_program_options.so /usr/lib/x86_64-linux-gnu/libtinyxml.so /opt/ros/kinetic/lib/libroscpp_serialization.so /opt/ros/kinetic/lib/librostime.so /opt/ros/kinetic/lib/libcpp_common.so /usr/lib/x86_64-linux-gnu/libboost_system.so /usr/lib/x86_64-linux-gnu/libboost_thread.so /usr/lib/x86_64-linux-gnu/libboost_chrono.so /usr/lib/x86_64-linux-gnu/libboost_date_time.so /usr/lib/x86_64-linux-gnu/libboost_atomic.so /usr/lib/x86_64-linux-gnu/libpthread.so /usr/lib/x86_64-linux-gnu/libconsole_bridge.so
)
## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(${PROJECT_NAME} ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Declare a C++ executable
## With catkin_make all packages are built within a single CMake context
## The recommended prefix ensures that target names across packages don't collide
add_executable(thinker src/thinker.cpp)
add_executable(cam_thinker src/cam_thinker.cpp)
add_executable(endtoend src/end_to_end_recognition.cpp)
add_executable(pic_thinker src/pic_thinker.cpp)
#add_executable(roomPosition src/roomPosition.cpp)

## Rename C++ executable without prefix
## The above recommended prefix causes long target names, the following renames the
## target back to the shorter version for ease of user use
## e.g. "rosrun someones_pkg node" instead of "rosrun someones_pkg someones_pkg_node"
# set_target_properties(${PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX "")

## Add cmake target dependencies of the executable
## same as for the library above
# add_dependencies(${PROJECT_NAME}_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Specify libraries to link a library or executable target against
#target_link_libraries(thinker
#  ${new_ros_libs}
#)
#
#target_link_libraries(cam_thinker
#  ${new_ros_libs}
#)
#target_link_libraries(endtoend
#  ${new_ros_libs} 
#)
#target_link_libraries(pic_thinker
# ${new_ros_libs}
#)


#target_link_libraries(roomPosition
# ${new_ros_libs}
#)

target_link_libraries(thinker
  ${catkin_LIBRARIES}
  ${OpenCV_LIBS}
)

target_link_libraries(cam_thinker
  ${catkin_LIBRARIES}
  ${OpenCV_LIBS}

)
target_link_libraries(endtoend
  ${catkin_LIBRARIES} 
  ${OpenCV_LIBS}

)
target_link_libraries(pic_thinker
 ${catkin_LIBRARIES}
  ${OpenCV_LIBS}
)

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS ${PROJECT_NAME} ${PROJECT_NAME}_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_doornumber.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
