// Generated by gencpp from file doornumber/boardArray.msg
// DO NOT EDIT!


#ifndef DOORNUMBER_MESSAGE_BOARDARRAY_H
#define DOORNUMBER_MESSAGE_BOARDARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <doornumber/board.h>

namespace doornumber
{
template <class ContainerAllocator>
struct boardArray_
{
  typedef boardArray_<ContainerAllocator> Type;

  boardArray_()
    : boardArray()  {
    }
  boardArray_(const ContainerAllocator& _alloc)
    : boardArray(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::doornumber::board_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::doornumber::board_<ContainerAllocator> >::other >  _boardArray_type;
  _boardArray_type boardArray;




  typedef boost::shared_ptr< ::doornumber::boardArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::doornumber::boardArray_<ContainerAllocator> const> ConstPtr;

}; // struct boardArray_

typedef ::doornumber::boardArray_<std::allocator<void> > boardArray;

typedef boost::shared_ptr< ::doornumber::boardArray > boardArrayPtr;
typedef boost::shared_ptr< ::doornumber::boardArray const> boardArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::doornumber::boardArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::doornumber::boardArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace doornumber

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'doornumber': ['/home/jk/catkin_lzw/src/doornumber/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::doornumber::boardArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::doornumber::boardArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::doornumber::boardArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::doornumber::boardArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::doornumber::boardArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::doornumber::boardArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::doornumber::boardArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "67a68e0f54af64c049c8d5824d305a60";
  }

  static const char* value(const ::doornumber::boardArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x67a68e0f54af64c0ULL;
  static const uint64_t static_value2 = 0x49c8d5824d305a60ULL;
};

template<class ContainerAllocator>
struct DataType< ::doornumber::boardArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "doornumber/boardArray";
  }

  static const char* value(const ::doornumber::boardArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::doornumber::boardArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "board[] boardArray\n\
\n\
================================================================================\n\
MSG: doornumber/board\n\
int16 tlx\n\
int16 tly\n\
int16 brx\n\
int16 bry\n\
string text\n\
float32 confidence\n\
";
  }

  static const char* value(const ::doornumber::boardArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::doornumber::boardArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.boardArray);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct boardArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::doornumber::boardArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::doornumber::boardArray_<ContainerAllocator>& v)
  {
    s << indent << "boardArray[]" << std::endl;
    for (size_t i = 0; i < v.boardArray.size(); ++i)
    {
      s << indent << "  boardArray[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::doornumber::board_<ContainerAllocator> >::stream(s, indent + "    ", v.boardArray[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DOORNUMBER_MESSAGE_BOARDARRAY_H
